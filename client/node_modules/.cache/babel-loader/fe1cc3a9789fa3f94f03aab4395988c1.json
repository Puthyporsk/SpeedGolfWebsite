{"ast":null,"code":"import _objectSpread from\"/Users/puthypor/Desktop/ssplay/SpeedGolfWebsite/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Users/puthypor/Desktop/ssplay/SpeedGolfWebsite/client/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/puthypor/Desktop/ssplay/SpeedGolfWebsite/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/puthypor/Desktop/ssplay/SpeedGolfWebsite/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/puthypor/Desktop/ssplay/SpeedGolfWebsite/client/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/puthypor/Desktop/ssplay/SpeedGolfWebsite/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/puthypor/Desktop/ssplay/SpeedGolfWebsite/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/puthypor/Desktop/ssplay/SpeedGolfWebsite/client/node_modules/@babel/runtime/helpers/esm/inherits\";//Rounds -- A parent component for the app's \"rounds\" mode.\n//Manages the rounds data for the current user and conditionally renders the\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\nimport React from'react';import AppMode from'./../AppMode.js';import RoundsTable from'./RoundsTable.js';import RoundForm from'./RoundForm.js';import FloatingButton from'./FloatingButton.js';var Rounds=/*#__PURE__*/function(_React$Component){_inherits(Rounds,_React$Component);//Initialize a Rounds object based on local storage\nfunction Rounds(){var _this;_classCallCheck(this,Rounds);_this=_possibleConstructorReturn(this,_getPrototypeOf(Rounds).call(this));_this.addRound=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(newData){var url,res,msg;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:url='/rounds/'+_this.props.userObj.id;_context.next=3;return fetch(url,{headers:{'Accept':'application/json','Content-Type':'application/json'},method:'POST',body:JSON.stringify(newData)});case 3:res=_context.sent;_context.next=6;return res.text();case 6:msg=_context.sent;if(res.status!=200){_this.setState({errorMsg:msg});_this.props.changeMode(AppMode.ROUNDS);}else{_this.setState({errorMsg:\"\"});_this.props.refreshOnUpdate(AppMode.ROUNDS);}case 8:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}();_this.editRound=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(newData){var url,res,msg;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:url='/rounds/'+_this.props.userObj.id+'/'+_this.props.userObj.rounds[_this.editId]._id;_context2.next=3;return fetch(url,{headers:{'Accept':'application/json','Content-Type':'application/json'},method:'PUT',body:JSON.stringify(newData)});case 3:res=_context2.sent;_context2.next=6;return res.text();case 6:msg=_context2.sent;if(res.status!=200){_this.setState({errorMsg:msg});_this.props.changeMode(AppMode.ROUNDS);}else{_this.props.refreshOnUpdate(AppMode.ROUNDS);}case 8:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}();_this.deleteRound=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var url,res,msg;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:url='/rounds/'+_this.props.userObj.id+'/'+_this.props.userObj.rounds[_this.deleteId]._id;_context3.next=3;return fetch(url,{method:'DELETE'});case 3:res=_context3.sent;_context3.next=6;return res.text();case 6:msg=_context3.sent;if(res.status!=200){_this.setState({errorMsg:\"An error occurred when attempting to delete round from database: \"+msg});_this.props.changeMode(AppMode.ROUNDS);}else{_this.props.refreshOnUpdate(AppMode.ROUNDS);}case 8:case\"end\":return _context3.stop();}}},_callee3);}));_this.setDeleteId=function(val){_this.deleteId=val;_this.setState({errorMsg:\"\"});};_this.setEditId=function(val){_this.editId=val;_this.setState({errorMsg:\"\"});};_this.closeErrorMsg=function(){_this.setState({errorMsg:\"\"});};_this.deleteId=\"\";_this.editId=\"\";_this.state={errorMsg:\"\"};return _this;}//addRound -- Given an object newData containing a new round, use the \n//server POST route to add the new round to the database. If the add is\n//successful, call on the refreshOnUpdate() method to force the parent\n//App component to refresh its state from the database and re-render itself,\n//allowing the change to be propagated to the Rounds table. Then switch\n//the mode back to AppMode.ROUNDS since the user is done adding a round.\n_createClass(Rounds,[{key:\"render\",//render -- Conditionally render the Rounds mode page as either the rounds\n//table, the rounds form set to obtain a new round, or the rounds form set\n//to edit an existing round.\nvalue:function render(){var _this2=this;switch(this.props.mode){case AppMode.ROUNDS:return React.createElement(React.Fragment,null,this.state.errorMsg!=\"\"?React.createElement(\"div\",{className:\"status-msg\"},React.createElement(\"span\",null,this.state.errorMsg),React.createElement(\"button\",{className:\"modal-close\",onClick:this.closeErrorMsg},React.createElement(\"span\",{className:\"fa fa-times\"}))):null,React.createElement(RoundsTable,{rounds:this.props.userObj.rounds,setEditId:this.setEditId,setDeleteId:this.setDeleteId,deleteRound:this.deleteRound,changeMode:this.props.changeMode,menuOpen:this.props.menuOpen}),React.createElement(FloatingButton,{handleClick:function handleClick(){return _this2.props.changeMode(AppMode.ROUNDS_LOGROUND);},menuOpen:this.props.menuOpen,icon:\"fa fa-plus\"}));case AppMode.ROUNDS_LOGROUND:return React.createElement(RoundForm,{mode:this.props.mode,startData:\"\",saveRound:this.addRound});case AppMode.ROUNDS_EDITROUND:var thisRound=_objectSpread({},this.props.userObj.rounds[this.editId]);thisRound.date=thisRound.date.substr(0,10);if(thisRound.seconds<10){thisRound.seconds=\"0\"+thisRound.seconds;}delete thisRound.SGS;return React.createElement(RoundForm,{mode:this.props.mode,startData:thisRound,saveRound:this.editRound});}}}]);return Rounds;}(React.Component);export default Rounds;","map":{"version":3,"sources":["/Users/puthypor/Desktop/ssplay/SpeedGolfWebsite/client/src/components/Rounds.js"],"names":["React","AppMode","RoundsTable","RoundForm","FloatingButton","Rounds","addRound","newData","url","props","userObj","id","fetch","headers","method","body","JSON","stringify","res","text","msg","status","setState","errorMsg","changeMode","ROUNDS","refreshOnUpdate","editRound","rounds","editId","_id","deleteRound","deleteId","setDeleteId","val","setEditId","closeErrorMsg","state","mode","menuOpen","ROUNDS_LOGROUND","ROUNDS_EDITROUND","thisRound","date","substr","seconds","SGS","Component"],"mappings":"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","sourcesContent":["//Rounds -- A parent component for the app's \"rounds\" mode.\n//Manages the rounds data for the current user and conditionally renders the\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\n\nimport React from 'react';\nimport AppMode from './../AppMode.js';\nimport RoundsTable from './RoundsTable.js';\nimport RoundForm from './RoundForm.js';\nimport FloatingButton from './FloatingButton.js';\n\nclass Rounds extends React.Component {\n\n    //Initialize a Rounds object based on local storage\n    constructor() {\n        super();\n        this.deleteId = \"\";\n        this.editId = \"\";\n        this.state = {errorMsg: \"\"};           \n    }\n\n    //addRound -- Given an object newData containing a new round, use the \n    //server POST route to add the new round to the database. If the add is\n    //successful, call on the refreshOnUpdate() method to force the parent\n    //App component to refresh its state from the database and re-render itself,\n    //allowing the change to be propagated to the Rounds table. Then switch\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\n    addRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'POST',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.setState({errorMsg: \"\"});\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n    //editRound -- Given an object newData containing updated data on an\n    //existing round, update the current user's round in the database. \n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\n    //round. \n    editRound = async (newData) => {\n        const url = '/rounds/' + this.props.userObj.id + '/' + \n            this.props.userObj.rounds[this.editId]._id;\n        const res = await fetch(url, {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n                },\n            method: 'PUT',\n            body: JSON.stringify(newData)}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }\n    }\n\n\n    //deleteRound -- Delete the current user's round uniquely identified by\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\n    deleteRound = async () => {\n        const url = '/rounds/' + this.props.userObj.id + '/' + \n            this.props.userObj.rounds[this.deleteId]._id;\n        const res = await fetch(url, {method: 'DELETE'}); \n        const msg = await res.text();\n        if (res.status != 200) {\n            this.setState({errorMsg: \"An error occurred when attempting to delete round from database: \" \n            + msg});\n            this.props.changeMode(AppMode.ROUNDS);\n        } else {\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\n        }  \n    }\n \n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\n    //the user is considering deleting.\n    setDeleteId = (val) => {\n        this.deleteId = val;\n        this.setState({errorMsg: \"\"});\n    }\n\n    //setEditId -- Capture in this.state.editId the unique id of the item\n    //the user is considering editing.\n    setEditId = (val) => {\n        this.editId = val;\n        this.setState({errorMsg: \"\"});\n    }\n\n    closeErrorMsg = () => {\n        this.setState({errorMsg: \"\"});\n    }\n    \n    //render -- Conditionally render the Rounds mode page as either the rounds\n    //table, the rounds form set to obtain a new round, or the rounds form set\n    //to edit an existing round.\n    render() {\n        switch(this.props.mode) {\n            case AppMode.ROUNDS:\n                return (\n                    <>\n                    {this.state.errorMsg != \"\" ? <div className=\"status-msg\"><span>{this.state.errorMsg}</span>\n                       <button className=\"modal-close\" onClick={this.closeErrorMsg}>\n                          <span className=\"fa fa-times\"></span>\n                        </button></div>: null}\n                    <RoundsTable \n                        rounds={this.props.userObj.rounds}\n                        setEditId={this.setEditId}\n                        setDeleteId={this.setDeleteId}\n                        deleteRound={this.deleteRound}\n                        changeMode={this.props.changeMode}\n                        menuOpen={this.props.menuOpen} /> \n                    <FloatingButton\n                        handleClick={() => \n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\n                        menuOpen={this.props.menuOpen}\n                        icon={\"fa fa-plus\"} />\n                    </>\n                );\n            case AppMode.ROUNDS_LOGROUND:\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={\"\"} \n                        saveRound={this.addRound} />\n                );\n            case AppMode.ROUNDS_EDITROUND:\n                let thisRound = {...this.props.userObj.rounds[this.editId]};\n                thisRound.date = thisRound.date.substr(0,10);\n                if (thisRound.seconds < 10) {\n                    thisRound.seconds = \"0\" + thisRound.seconds;\n                } \n                delete thisRound.SGS;\n                return (\n                    <RoundForm\n                        mode={this.props.mode}\n                        startData={thisRound} \n                        saveRound={this.editRound} />\n                );\n        }\n    }\n\n}   \n\nexport default Rounds;\n"]},"metadata":{},"sourceType":"module"}